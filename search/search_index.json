{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to documentation","text":""},{"location":"about/","title":"About","text":""},{"location":"about/#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"about/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"about/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"docker/registry-setup/","title":"Registry Setup","text":"<ol> <li> <p>Generate ssl certificates:</p> <pre><code>openssl req -x509 -newkey rsa:4096 -days 365 -nodes -sha256 -keyout domain.key -out domain.crt\n</code></pre> </li> <li> <p>Generate htpasswd:</p> </li> </ol> <pre><code>   htpasswd -Bbn linux test&gt; htpasswd\n</code></pre> <ol> <li> <p>Copy domain.crt to /etc/docker/certs.d/$(hostname):5000 as ca.crt</p> <pre><code>mkdir -pv /etc/docker/certs.d/$(hostname):5000\nsudo cp domain.crt /usr/local/share/ca-certificates/$(hostname).crt\nsudo update-ca-certificates\n</code></pre> </li> </ol>"},{"location":"git/bare-repo/","title":"Bare repo","text":"<pre><code>git init --bare $HOME/.cfg\n\necho \"alias dot='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'\" &gt;&gt; $HOME/.bash_aliases\n\nalias dot='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'\n\ndot config --local status.showUntrackedFiles no\n\ndot remote add origin git@github.com:mysubsnewslivecom/cfg.git\n\ndot remote set-url origin git@github.com:mysubsnewslivecom/cfg.git\n</code></pre>"},{"location":"git/commands/","title":"Commands","text":""},{"location":"git/commands/#git-log","title":"Git log","text":"<ol> <li>Log</li> </ol> <pre><code>git log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%an%C(reset)%C(bold yellow)%d%C(reset) %C(dim white)- %s%C(reset)' --all\n</code></pre>"},{"location":"kubernetes/","title":"Index","text":""},{"location":"kubernetes/#storage-class","title":"Storage class","text":"<pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nEOF\n</code></pre>"},{"location":"vault/raspberrypi/","title":"Setting vault for kubernetes","text":""},{"location":"vault/raspberrypi/#1-enable-vault-path","title":"1. Enable vault path","text":"<pre><code>vault secrets enable -path=secret kv-v2\n\nvault auth enable kubernetes\n\nvault auth enable userpass\n</code></pre>"},{"location":"vault/raspberrypi/#2-setup-kubernetes-auth-config","title":"2. Setup Kubernetes auth config","text":"<pre><code>vault write auth/kubernetes/config \\\ntoken_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\nkubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\nkubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n</code></pre>"},{"location":"vault/raspberrypi/#3-create-vault-policy","title":"3. Create vault policy","text":"<pre><code>vault policy write database-app - &lt;&lt;EOF\npath \"secret/data/database/config\" {\n  capabilities = [\"read\"]\n}\nEOF\nvault policy write app - &lt;&lt;EOF\npath \"secret*\" {\n  capabilities = [\"read\"]\n}\nEOF\n</code></pre>"},{"location":"vault/raspberrypi/#4-create-kubernetes-service-account","title":"4. Create kubernetes service account","text":"<pre><code>export SERVICE_NAME=vault-sa\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: ${SERVICE_NAME?}\nEOF\n# or\nkubectl create serviceaccount ${SERVICE_NAME?}\n</code></pre>"},{"location":"vault/raspberrypi/#5-create-vault-role","title":"5. Create vault role","text":"<pre><code>export SERVICE_NAME=vault-sa\nexport NAMESPACE=vault\nvault write auth/kubernetes/role/internal-app \\\nbound_service_account_names=${SERVICE_NAME?} \\\nbound_service_account_namespaces=${NAMESPACE?} \\\npolicies=app \\\nttl=24h\n</code></pre>"}]}